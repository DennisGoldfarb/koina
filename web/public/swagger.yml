# TODO:
# - remove this file
# - fix the openapi generation
# - use the generated openapi document instead of this file
openapi: 3.0.3
info:
  title: Koina
  description: |-
    This is the official documentation of the machine learning model hosting platform Koina.
    Koina is a generic, open-source, and online-accessible prediction service
    that significantly simplifies using machine learning models by making them accessible via the web.

    ## Accessing a public server
    You can access Koina using either http or grpc.
    For each model endpoint below you will find multiple examples of how to request predictions.
    The simplest option is to use the "Try Out" button which will send a request directly in your browser.
    The "Try out" button will also autogenerate an example code using curl.
    Lastly for each model there is also an example of how to send gRPC requests using Python.

    ## Hosting your own server
    Koina is open source and free to use as such you can host your own instance of Koina.
    For this we provide an easy to use docker image.
    For more information regarding this go to our  <a href="https://github.com/wilhelm-lab/koina">GitHub</a>.

    Koina was initially developed at EUBIC Developers Meeting 2023 and is meant as a resource from the community for the community.
    Multiple organizations are already hosting instances of Koina.
    Such as the  <a href="https://fgcz.ch/omics_areas/bioinf/proteome_informatics.html">ETH</a>, <a href="https://www1.ls.tum.de/en/compms/home/">TUM</a> as well as <a href="https://www.msaid.de/">MSAID</a>.

    You can join in this community effort, it's as simple as running the provided docker image and sending an email to Ludwig.Lautenbacher@tum.de telling me under which URL your server can be accessed.

    ## Adding your own model
    If you are developing a machine learning model in the field of proteomics, and want to make it as widely available as possible you can contribute by adding your model to Koina.
    You will find detailed instructions on how to do this in our <a href="https://github.com/wilhelm-lab/koina">GitHub</a>

  termsOfService: https://github.com/wilhelm-lab/koina
  contact:
    email: Ludwig.Lautenbacher@tum.de
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.7
externalDocs:
  description: Koina GitHub
  url: https://github.com/wilhelm-lab/koina
servers:
  - url: https://koina.proteomicsdb.org/v2/models

tags:
  - name: Intensity
    externalDocs:
      description: Find out more
      url: https://www.proteomicsdb.org/

  - name: Retention Time
    externalDocs:
      description: Find out more
      url: https://www.proteomicsdb.org/

  - name: Collisional cross section
    externalDocs:
      description: Find out more
      url: https://www.proteomicsdb.org/

paths:
  /ms2pip_2021_HCD/infer:
    post:
      tags:
        - Intensity
      summary: "MS²PIP"
      description: |
        <b>MS<sup>2</sup>PIP</b><br><br>Find out more about this model <a href="https://github.com/compomics/ms2pip">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Gabriels, R., Martens, L., & Degroeve, S. (2019). Updated MS²PIP web server delivers fast and accurate MS² peak intensity prediction for multiple fragmentation methods, instruments and labeling techniques. Nucleic Acids Research doi:10.1093/nar/gkz299<br><br>Prior MS²PIP publications:<br><br>Degroeve, S., Maddelein, D., & Martens, L. (2015). MS²PIP prediction server: compute and visualize MS² peak intensity predictions for CID and HCD fragmentation. Nucleic Acids Research, 43(W1), W326–W330. doi:10.1093/nar/gkv542<br><br>Degroeve, S., & Martens, L. (2013). MS²PIP: a tool for MS/MS peak intensity prediction. Bioinformatics (Oxford, England), 29(24), 3199–203. doi:10.1093/bioinformatics/btt544<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;ms2pip_2021_HCD&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;ACDEK&quot;, &quot;AAAAAAAAAAAAA&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([2,1]),<br>    &quot;precursor_charge&quot;: np.array([2, 3], dtype=np.dtype(&quot;int16&quot;)).reshape([2,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: ms2pip_2021_HCD
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ms2pip_2021_HCD_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/ms2pip_2021_HCD_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ms2pip_2021_HCD_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /AlphaPept_rt_generic/infer:
    post:
      tags:
        - Retention Time
      summary: "AlphaPept"
      description: |
        <b>AlphaPept</b><br><br>Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;AlphaPept_rt_generic&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAKM[UNIMOD:21]&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([1,1]),<br>}<br>outputs = [ &quot;irt&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: AlphaPept_rt_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlphaPept_rt_generic_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/AlphaPept_rt_generic_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AlphaPept_rt_generic_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /AlphaPept_ms2_generic/infer:
    post:
      tags:
        - Intensity
      summary: "AlphaPept"
      description: |
        <b>AlphaPept</b><br><br>Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;AlphaPept_ms2_generic&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAKM[UNIMOD:21]&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([1,1]),<br>    &quot;precursor_charge&quot;: np.array([2], dtype=np.dtype(&quot;int32&quot;)).reshape([1,1]),<br>    &quot;collision_energies&quot;: np.array([25], dtype=np.dtype(&quot;int32&quot;)).reshape([1,1]),<br>    &quot;instrument_types&quot;: np.array([1], dtype=np.dtype(&quot;int64&quot;)).reshape([1,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: AlphaPept_ms2_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlphaPept_ms2_generic_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/AlphaPept_ms2_generic_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AlphaPept_ms2_generic_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /AlphaPept_ccs_generic/infer:
    post:
      tags:
        - Collisional cross section
      summary: "AlphaPept"
      description: |
        <b>AlphaPept</b><br><br>Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;AlphaPept_ccs_generic&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAKM[UNIMOD:21]&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([1,1]),<br>    &quot;precursor_charge&quot;: np.array([2], dtype=np.dtype(&quot;int32&quot;)).reshape([1,1]),<br>}<br>outputs = [ &quot;ccs&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: AlphaPept_ccs_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlphaPept_ccs_generic_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/AlphaPept_ccs_generic_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AlphaPept_ccs_generic_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2020_intensity_HCD/infer:
    post:
      tags:
        - Intensity
      summary: "Prosit intensity HCD"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2020_intensity_HCD&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAK&quot;, &quot;AAAAAKAK&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([2,1]),<br>    &quot;precursor_charge&quot;: np.array([1,2], dtype=np.dtype(&quot;int32&quot;)).reshape([2,1]),<br>    &quot;collision_energies&quot;: np.array([25, 25], dtype=np.dtype(&quot;float32&quot;)).reshape([2,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;,  &quot;annotation&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2020_intensity_HCD
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2020_irt_TMT/infer:
    post:
      tags:
        - Retention Time
      summary: "Prosit irt TMT"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wassim Gabriel, Matthew The, Daniel P. Zolg, Florian P. Bayer, Omar Shouman, Ludwig Lautenbacher, Karsten Schnatbaum, Johannes Zerweck, Tobias Knaute, Bernard Delanghe, Andreas Huhmer, Holger Wenschuh, Ulf Reimer, Guillaume Médard, Bernhard Kuster, and Mathias Wilhelm<br>Analytical Chemistry 2022 94 (20), 7181-7190<br>DOI: 10.1021/acs.analchem.1c05435 <br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2020_irt_TMT&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAKM[UNIMOD:21]&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([1,1]),<br>}<br>outputs = [ &quot;irt&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2020_irt_TMT
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2020_irt_TMT_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2020_irt_TMT_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2020_irt_TMT_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2020_intensity_TMT/infer:
    post:
      tags:
        - Intensity
      summary: "Prosit intensity TMT"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wassim Gabriel, Matthew The, Daniel P. Zolg, Florian P. Bayer, Omar Shouman, Ludwig Lautenbacher, Karsten Schnatbaum, Johannes Zerweck, Tobias Knaute, Bernard Delanghe, Andreas Huhmer, Holger Wenschuh, Ulf Reimer, Guillaume Médard, Bernhard Kuster, and Mathias Wilhelm<br>Analytical Chemistry 2022 94 (20), 7181-7190<br>DOI: 10.1021/acs.analchem.1c05435 <br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2020_intensity_TMT&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAK&quot;, &quot;AAAAAKAK&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([2,1]),<br>    &quot;precursor_charge&quot;: np.array([1,2], dtype=np.dtype(&quot;int32&quot;)).reshape([2,1]),<br>    &quot;collision_energies&quot;: np.array([25, 25], dtype=np.dtype(&quot;float32&quot;)).reshape([2,1]),<br>    &quot;fragmentation_types&quot;: np.array([0, 0], dtype=np.dtype(&quot;float32&quot;)).reshape([2,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;,  &quot;annotation&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2020_intensity_TMT
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2019_intensity/infer:
    post:
      tags:
        - Intensity
      summary: "Prosit intensity"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Prosit offers high quality MS2 predicted spectra for any organism and protease as well as iRT prediction. When using Prosit is helpful for your research, please cite "Gessulat, Schmidt et al. 2019" DOI 10.1038/s41592-019-0426-7 <br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2019_intensity&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAK&quot;, &quot;AAAAAKAK&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([2,1]),<br>    &quot;precursor_charge&quot;: np.array([1,2], dtype=np.dtype(&quot;int32&quot;)).reshape([2,1]),<br>    &quot;collision_energies&quot;: np.array([25, 25], dtype=np.dtype(&quot;float32&quot;)).reshape([2,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;,  &quot;annotation&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2019_intensity
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2019_intensity_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2019_intensity_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2019_intensity_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2019_irt/infer:
    post:
      tags:
        - Retention Time
      summary: "Prosit irt"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2019_irt&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAKM[UNIMOD:21]&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([1,1]),<br>}<br>outputs = [ &quot;irt&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2019_irt
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2019_irt_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2019_irt_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2019_irt_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Prosit_2020_intensity_CID/infer:
    post:
      tags:
        - Intensity
      summary: "Prosit intensity CID"
      description: |
        <b>Prosit</b><br><br>Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Prosit_2020_intensity_CID&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([&quot;AAAAAKAK&quot;, &quot;AAAAAKAK&quot;], dtype=np.dtype(&quot;O&quot;)).reshape([2,1]),<br>    &quot;precursor_charge&quot;: np.array([1,2], dtype=np.dtype(&quot;int32&quot;)).reshape([2,1]),<br>}<br>outputs = [ &quot;intensities&quot;,  &quot;mz&quot;,  &quot;annotation&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Prosit_2020_intensity_CID
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_CID_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_CID_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prosit_2020_intensity_CID_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /Deeplc_hela_hf/infer:
    post:
      tags:
        - Retention Time
      summary: "DeepLC"
      description: |
        <b>DeepLC</b><br><br>Find out more about this model <a href="https://github.com/compomics/DeepLC/tree/master">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>DeepLC can predict retention times for peptides that carry as-yet unseen modifications<br>Robbin Bouwmeester, Ralf Gabriels, Niels Hulstaert, Lennart Martens & Sven Degroeve<br>Nature Methods 18, 1363–1369 (2021) doi: 10.1038/s41592-021-01301-5<br>
        <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br><br>nptype_convert = {<br>    np.dtype(&quot;float32&quot;): &quot;FP32&quot;,<br>    np.dtype(&quot;O&quot;): &quot;BYTES&quot;,<br>    np.dtype(&quot;int16&quot;): &quot;INT16&quot;,<br>    np.dtype(&quot;int32&quot;): &quot;INT32&quot;,<br>    np.dtype(&quot;int64&quot;): &quot;INT64&quot;,<br>}<br><br>server_url = &quot;koina.proteomicsdb.org:8008&quot;<br>model_name = &quot;Deeplc_hela_hf&quot;<br>batch_size = 1000<br>inputs = { <br>    &quot;peptide_sequences&quot;: np.array([[&#x27;LGGNEQVTR&#x27;], [&#x27;GAGSSEPVTGLDAK&#x27;], [&#x27;VEATFGVDESNAK&#x27;], [&#x27;LFLQFGAQGSPFLK&#x27;]], dtype=np.dtype(&quot;O&quot;)).reshape([4,1]),<br>}<br>outputs = [ &quot;dense_323&quot;, ]<br><br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br><br>koina_outputs = []<br>for name in outputs:<br>    koina_outputs.append(grpcclient.InferRequestedOutput(name))<br><br>predictions = {name: [] for name in outputs}<br>len_inputs = list(inputs.values())[0].shape[0]<br>for i in range(0, len_inputs, batch_size):<br>    if len_inputs &lt; i+batch_size:<br>        current_batchsize = len_inputs<br>    else:<br>        current_batchsize = batch_size<br><br>    koina_inputs = []<br>    for iname, iarr in inputs.items():<br>        koina_inputs.append(<br>            grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])<br>        )<br>        koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])<br><br>    prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)<br>    <br>    for name in outputs:<br>        predictions[name].append(prediction.as_numpy(name))<br><br>for key, value in predictions.items():<br>    predictions[key] = np.vstack(value)<br>    print(key)<br>    print(predictions[key])</pre>
      operationId: Deeplc_hela_hf
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deeplc_hela_hf_input"
          application/xml:
            schema:
              $ref: "#/components/schemas/Deeplc_hela_hf_input"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Deeplc_hela_hf_input"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

components:
  schemas:
    parameters:
      type: object
      properties:
        sequence_id:
          type: integer
          example: 0
        sequence_start:
          type: boolean
          example: false
        sequence_end:
          type: boolean
          example: false

    ms2pip_2021_HCD_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/ms2pip_2021_HCD_input_peptide_sequences"

              - $ref: "#/components/schemas/ms2pip_2021_HCD_input_precursor_charge"

    ms2pip_2021_HCD_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["ACDEK", "AAAAAAAAAAAAA"]
          items:
            type: string

    ms2pip_2021_HCD_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT16
        data:
          type: array
          example: [2, 3]
          items:
            type: number

    AlphaPept_rt_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/AlphaPept_rt_generic_input_peptide_sequences"

    AlphaPept_rt_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:21]"]
          items:
            type: string

    AlphaPept_ms2_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_peptide_sequences"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_precursor_charge"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_collision_energies"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_instrument_types"

    AlphaPept_ms2_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:21]"]
          items:
            type: string

    AlphaPept_ms2_generic_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [2]
          items:
            type: number

    AlphaPept_ms2_generic_input_collision_energies:
      type: object
      properties:
        name:
          type: string
          example: collision_energies
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [25]
          items:
            type: number

    AlphaPept_ms2_generic_input_instrument_types:
      type: object
      properties:
        name:
          type: string
          example: instrument_types
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT64
        data:
          type: array
          example: [1]
          items:
            type: number

    AlphaPept_ccs_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/AlphaPept_ccs_generic_input_peptide_sequences"

              - $ref: "#/components/schemas/AlphaPept_ccs_generic_input_precursor_charge"

    AlphaPept_ccs_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:21]"]
          items:
            type: string

    AlphaPept_ccs_generic_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [2]
          items:
            type: number

    Prosit_2020_intensity_HCD_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_precursor_charge"

              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_collision_energies"

    Prosit_2020_intensity_HCD_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type: string

    Prosit_2020_intensity_HCD_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [1, 2]
          items:
            type: number

    Prosit_2020_intensity_HCD_input_collision_energies:
      type: object
      properties:
        name:
          type: string
          example: collision_energies
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: FP32
        data:
          type: array
          example: [25, 25]
          items:
            type: number

    Prosit_2020_irt_TMT_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2020_irt_TMT_input_peptide_sequences"

    Prosit_2020_irt_TMT_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:21]"]
          items:
            type: string

    Prosit_2020_intensity_TMT_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_precursor_charge"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_collision_energies"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_fragmentation_types"

    Prosit_2020_intensity_TMT_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type: string

    Prosit_2020_intensity_TMT_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [1, 2]
          items:
            type: number

    Prosit_2020_intensity_TMT_input_collision_energies:
      type: object
      properties:
        name:
          type: string
          example: collision_energies
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: FP32
        data:
          type: array
          example: [25, 25]
          items:
            type: number

    Prosit_2020_intensity_TMT_input_fragmentation_types:
      type: object
      properties:
        name:
          type: string
          example: fragmentation_types
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: FP32
        data:
          type: array
          example: [0, 0]
          items:
            type: number

    Prosit_2019_intensity_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2019_intensity_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2019_intensity_input_precursor_charge"

              - $ref: "#/components/schemas/Prosit_2019_intensity_input_collision_energies"

    Prosit_2019_intensity_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type: string

    Prosit_2019_intensity_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [1, 2]
          items:
            type: number

    Prosit_2019_intensity_input_collision_energies:
      type: object
      properties:
        name:
          type: string
          example: collision_energies
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: FP32
        data:
          type: array
          example: [25, 25]
          items:
            type: number

    Prosit_2019_irt_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2019_irt_input_peptide_sequences"

    Prosit_2019_irt_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [1, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:21]"]
          items:
            type: string

    Prosit_2020_intensity_CID_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Prosit_2020_intensity_CID_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_CID_input_precursor_charge"

    Prosit_2020_intensity_CID_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type: string

    Prosit_2020_intensity_CID_input_precursor_charge:
      type: object
      properties:
        name:
          type: string
          example: precursor_charge
        shape:
          type: array
          example: [2, 1]
          items:
            type: integer
        datatype:
          type: string
          example: INT32
        data:
          type: array
          example: [1, 2]
          items:
            type: number

    Deeplc_hela_hf_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Deeplc_hela_hf_input_peptide_sequences"

    Deeplc_hela_hf_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
          example: peptide_sequences
        shape:
          type: array
          example: [4, 1]
          items:
            type: integer
        datatype:
          type: string
          example: BYTES
        data:
          type: array
          example:
            [
              ["LGGNEQVTR"],
              ["GAGSSEPVTGLDAK"],
              ["VEATFGVDESNAK"],
              ["LFLQFGAQGSPFLK"],
            ]
          items:
            type: string
