openapi: 3.0.3
info:
  title: Swagger Triton Prosit model serving - OpenAPI 3.0
  description: |-
   This is a documentation for the machine learning models for proteomics DLomix
   There are multiple different models are hosted. Such as Prosit, MS2PIP and DeepLC
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://10.152.171.77:8502/v2/models

tags:

  - name: intensity
    description: Intensity models
    externalDocs:
      description: Find out more
      url: proteomics.db

  - name: intensity
    description: Intensity models
    externalDocs:
      description: Find out more
      url: proteomics.db

  - name: Retention Time
    description: Retention time models
    externalDocs:
      description: Find out more
      url: proteomics.db

  - name: intensity
    description: Intensity models
    externalDocs:
      description: Find out more
      url: proteomics.db

paths:

  /Prosit_2019_intensity_ensemble/infer:
     post:
      tags:
        - intensity
      summary: Prosit 2019 model predicts intensity
      description: |
              <b>Prosit intensity 2019 model</b> takes precursor_charge,collision_energy,peptides_in produces intensity of peptides. General applicability of Prosit by predicting spectra for proteases other than trypsin, generating spectral libraries  for data-independent acquisition and improving the analysis of metaproteomes. The below code allows you to send request via GRPC in python

              <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br>outputs=[]<br>server_url = "10.152.171.77:8504"<br>model_name = "Prosit_2019_intensity_ensemble"<br>out_layer1="out/Reshape:1" <br>out_layer2="out/Reshape:2" <br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br>inputs = []<br>inputs.append(grpcclient.InferInput("precursor_charge_in_int:0", [1, 1], "INT32")) <br>inputs.append(grpcclient.InferInput("peptides_in_str:0", [1, 1], "BYTES")) <br>inputs.append(grpcclient.InferInput("collision_energy_in:0", [1, 1], "FP32")) <br>input0 = np.array([[1] for i in range(0,1)],dtype=np.int32) <br>input1 = np.array([['AAAAAKAK'] for i in range(0,1)],dtype=np.object_) <br>input2 = np.array([[25] for i in range(0,1)],dtype=np.float32) <br>inputs[0].set_data_from_numpy(input0) <br>inputs[1].set_data_from_numpy(input1) <br>inputs[2].set_data_from_numpy(input2) <br>outputs.append(grpcclient.InferRequestedOutput(out_layer1))<br>outputs.append(grpcclient.InferRequestedOutput(out_layer2))<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>start = time.time()<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>end = time.time()<br>print("Result")<br>print(np.round(result.as_numpy(out_layer1), 1))<br>print(np.round(result.as_numpy(out_layer2), 1))<br></pre>
      operationId: Prosit_2019_intensity_ensemble
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2019_intensity_ensemble_input'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prosit_2019_intensity_ensemble_input'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Prosit_2019_intensity_ensemble_input'
        required: true
      responses:
        '200':
          description: Successful operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Prosit_2019_intensity_ensemble_output'
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/Prosit_2019_intensity_ensemble_output'
        '405':
          description: Invalid input

  /ms2pip_ensemble/infer:
     post:
      tags:
        - intensity
      summary: MS2Pip predicts intensity of peptides
      description: |
              <b>MS(2)PIP</b> for predicting the intensity of the most important fragment ion signal peaks from a peptide sequence. 

              <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br>outputs=[]<br>server_url = "10.152.171.77:8504"<br>model_name = "ms2pip_ensemble"<br>out_layer1="model_20210416_HCD2021_B_output" <br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br>inputs = []<br>inputs.append(grpcclient.InferInput("proforma_ensemble", [1, 2], "BYTES")) <br>input0 = np.array([[['ACDEK/2'], ['AAAAAAAAAAAAA/3']] for i in range(0,2)],dtype=np.object_) <br>inputs[0].set_data_from_numpy(input0) <br>outputs.append(grpcclient.InferRequestedOutput(out_layer1))<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>start = time.time()<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>end = time.time()<br>print("Result")<br>print(np.round(result.as_numpy(out_layer1), 1))<br></pre>
      operationId: ms2pip_ensemble
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ms2pip_ensemble_input'
          application/xml:
            schema:
              $ref: '#/components/schemas/ms2pip_ensemble_input'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ms2pip_ensemble_input'
        required: true
      responses:
        '200':
          description: Successful operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ms2pip_ensemble_output'
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/ms2pip_ensemble_output'
        '405':
          description: Invalid input

  /Deeplc_Triton_ensemble/infer:
     post:
      tags:
        - Retention Time
      summary: Deeplc peptide retention time prediction model
      description: |
              <b>DeepLC</b>, a deep learning peptide retention time predictor using peptide encoding based on atomic composition that allows the retention time of (previously unseen) modified peptides to be predicted accurately.

              <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br>outputs=[]<br>server_url = "10.152.171.77:8504"<br>model_name = "Deeplc_Triton_ensemble"<br>out_layer1="dense_323" <br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br>inputs = []<br>inputs.append(grpcclient.InferInput("peptides_in_str:0", [1, 4], "BYTES")) <br>input0 = np.array([[['LGGNEQVTR'], ['GAGSSEPVTGLDAK'], ['VEATFGVDESNAK'], ['LFLQFGAQGSPFLK']] for i in range(0,4)],dtype=np.object_) <br>inputs[0].set_data_from_numpy(input0) <br>outputs.append(grpcclient.InferRequestedOutput(out_layer1))<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>start = time.time()<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>end = time.time()<br>print("Result")<br>print(np.round(result.as_numpy(out_layer1), 1))<br></pre>
      operationId: Deeplc_Triton_ensemble
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deeplc_Triton_ensemble_input'
          application/xml:
            schema:
              $ref: '#/components/schemas/Deeplc_Triton_ensemble_input'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Deeplc_Triton_ensemble_input'
        required: true
      responses:
        '200':
          description: Successful operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Deeplc_Triton_ensemble_output'
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/Deeplc_Triton_ensemble_output'
        '405':
          description: Invalid input

  /AlphaPept_ms2_generic_ensemble/infer:
     post:
      tags:
        - intensity
      summary: Alphapept peptide retention time prediction model
      description: |
              <b>Alphapept</b>

              <pre>import numpy as np<br>import time<br>import tritonclient.grpc as grpcclient<br>outputs=[]<br>server_url = "10.152.171.77:8504"<br>model_name = "AlphaPept_ms2_generic_ensemble"<br>out_layer1="out/Reshape:0" <br>triton_client = grpcclient.InferenceServerClient(url=server_url)<br>inputs = []<br>inputs.append(grpcclient.InferInput("peptides_in_str:0", [1, 1], "BYTES")) <br>inputs.append(grpcclient.InferInput("collision_energy_in:0", [1, 1], "INT32")) <br>inputs.append(grpcclient.InferInput("precursor_charge_in_int:0", [1, 1], "INT32")) <br>inputs.append(grpcclient.InferInput("instrument_indices:0", [1, 1], "INT64")) <br>input0 = np.array([[['AAAAAKAKM[UNIMOD:21]']] for i in range(0,1)],dtype=np.object_) <br>input1 = np.array([[[25]] for i in range(0,1)],dtype=np.int32) <br>input2 = np.array([[[2]] for i in range(0,1)],dtype=np.int32) <br>input3 = np.array([[[1]] for i in range(0,1)],dtype=np.int64) <br>inputs[0].set_data_from_numpy(input0) <br>inputs[1].set_data_from_numpy(input1) <br>inputs[2].set_data_from_numpy(input2) <br>inputs[3].set_data_from_numpy(input3) <br>outputs.append(grpcclient.InferRequestedOutput(out_layer1))<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>start = time.time()<br>result = triton_client.infer(model_name, inputs=inputs, outputs=outputs)<br>end = time.time()<br>print("Result")<br>print(np.round(result.as_numpy(out_layer1), 1))<br></pre>
      operationId: AlphaPept_ms2_generic_ensemble
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlphaPept_ms2_generic_ensemble_input'
          application/xml:
            schema:
              $ref: '#/components/schemas/AlphaPept_ms2_generic_ensemble_input'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AlphaPept_ms2_generic_ensemble_input'
        required: true
      responses:
        '200':
          description: Successful operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/AlphaPept_ms2_generic_ensemble_output'
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/AlphaPept_ms2_generic_ensemble_output'
        '405':
          description: Invalid input


components:
  schemas:
    parameters:
      type: object
      properties:
        sequence_id:
          type: integer
          example: 0
        sequence_start:
          type: boolean
          example: false
        sequence_end:
          type: boolean
          example: false


    Prosit_2019_intensity_ensemble_input:
      type: object
      properties:
        id:
          type: string
          example: "it_can_be_anything"
        inputs:
          type: array
          example: [
  {
      "name": "precursor_charge_in_int:0",
      "shape": [1, 1],
      "datatype": "INT32",
      "data": [1]
  },
  {
      "name": "peptides_in_str:0",
      "shape": [1, 1],
      "datatype": "BYTES",
      "data": ["AAAAAKAK"]
  },
  {
      "name": "collision_energy_in:0",
      "shape": [1,1],
      "datatype": "FP32",
      "data": [25]
  }
]
          items:
            allOf:
              
              - $ref: "#/components/schemas/Prosit_2019_intensity_ensemble_input_peptides_in_str:0"
              
              - $ref: "#/components/schemas/Prosit_2019_intensity_ensemble_input_precursor_charge_in_int:0"
              
              - $ref: "#/components/schemas/Prosit_2019_intensity_ensemble_input_collision_energy_in:0"
              
        
  
    Prosit_2019_intensity_ensemble_input_peptides_in_str:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
    Prosit_2019_intensity_ensemble_input_precursor_charge_in_int:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
    Prosit_2019_intensity_ensemble_input_collision_energy_in:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  

    ms2pip_ensemble_input:
      type: object
      properties:
        id:
          type: string
          example: "it_can_be_anything"
        inputs:
          type: array
          example: [
  {
      "name": "proforma_ensemble",
      "shape": [1,2],
      "datatype": "BYTES",
      "data": [["ACDEK/2"], ["AAAAAAAAAAAAA/3"]]
  }
]
          items:
            allOf:
              
              - $ref: "#/components/schemas/ms2pip_ensemble_input_proforma_ensemble"
              
        
  
    ms2pip_ensemble_input_proforma_ensemble:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  

    Deeplc_Triton_ensemble_input:
      type: object
      properties:
        id:
          type: string
          example: "it_can_be_anything"
        inputs:
          type: array
          example: [
  {
      "name": "peptides_in_str:0",
      "shape": [1,4],
      "datatype": "BYTES",
      "data": [["LGGNEQVTR"], ["GAGSSEPVTGLDAK"], ["VEATFGVDESNAK"], ["LFLQFGAQGSPFLK"]]
  }
]
          items:
            allOf:
              
              - $ref: "#/components/schemas/Deeplc_Triton_ensemble_input_peptides_in_str:0"
              
        
  
    Deeplc_Triton_ensemble_input_peptides_in_str:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  

    AlphaPept_ms2_generic_ensemble_input:
      type: object
      properties:
        id:
          type: string
          example: "it_can_be_anything"
        inputs:
          type: array
          example: [
  {
    "name": "peptides_in_str:0",
    "shape": [1,1],
    "datatype": "BYTES",
    "data": [["AAAAAKAKM[UNIMOD:21]"]]
  },
  {
    "name": "collision_energy_in:0",
    "shape": [1,1],
    "datatype": "INT32",
    "data": [[25]]
  },
  {
    "name": "precursor_charge_in_int:0",
    "shape": [1,1],
    "datatype": "INT32",
    "data": [[2]]
  },
  {
    "name": "instrument_indices:0",
    "shape": [1,1],
    "datatype": "INT64",
    "data": [[1]]
  }
]
          items:
            allOf:
              
              - $ref: "#/components/schemas/AlphaPept_ms2_generic_ensemble_input_peptides_in_str:0"
              
              - $ref: "#/components/schemas/AlphaPept_ms2_generic_ensemble_input_precursor_charge_in_int:0"
              
              - $ref: "#/components/schemas/AlphaPept_ms2_generic_ensemble_input_collision_energy_in:0"
              
              - $ref: "#/components/schemas/AlphaPept_ms2_generic_ensemble_input_instrument_indices:0"
              
        
  
    AlphaPept_ms2_generic_ensemble_input_peptides_in_str:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
    AlphaPept_ms2_generic_ensemble_input_precursor_charge_in_int:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
    AlphaPept_ms2_generic_ensemble_input_collision_energy_in:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
    AlphaPept_ms2_generic_ensemble_input_instrument_indices:0:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          items:
            type: string
  
